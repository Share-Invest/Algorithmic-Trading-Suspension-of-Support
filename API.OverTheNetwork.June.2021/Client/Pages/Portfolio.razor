@page "/portfolio"
@inject HttpClient http

@if (dictionary.Count > 0)
{
	@foreach (var kv in dictionary.OrderBy(o => o.Key))
	{
		<div class="" id="">
			<p>
				@{
					var value = kv.Value;
					var param = value.Peek();
					<h5>
						<span><strong><b>@param.Date</b></strong></span>
						<span><small><i>@kv.Key</i></small></span>
					</h5>
					<table class="table">
						<thead>
							<tr class="">
								<th scope="col" title="매출, 영업이익, 순이익, 현금흐름 ( ● : 사용)"><div></div></th>
								<th scope="col"><div>@quarter[0]</div></th>
								<th scope="col"><div>@quarter[1]</div></th>
								<th scope="col"><div>@quarter[2]</div></th>
								<th scope="col"><div>@quarter[3]</div></th>
								<th scope="col"><div>@quarter[4]</div></th>
								<th scope="col"><div>@quarter[5]</div></th>
							</tr>
						</thead>

						@while (value.Count > 0)
						{
							param = value.Dequeue();
							<tbody>
								<tr>
									<th scope="row"><div>@param.Strategics.Replace("T", "●").Replace("F", "·")</div></th>
									@{
										var convert = ConvertFormat(param.FirstQuarter);
										<td style="color: @convert.Item2">@convert.Item1</td>
										convert = ConvertFormat(param.SecondQuarter);
										<td style="color: @convert.Item2">@convert.Item1</td>
										convert = ConvertFormat(param.ThirdQuarter);
										<td style="color: @convert.Item2">@convert.Item1</td>
										convert = ConvertFormat(param.Quarter);
										<td style="color: @convert.Item2">@convert.Item1</td>
										convert = ConvertFormat(param.TheNextYear);
										<td style="color: @convert.Item2">@convert.Item1</td>
										convert = ConvertFormat(param.TheYearAfterNext);
										<td style="color: @convert.Item2">@convert.Item1</td>
									}
								</tr>
							</tbody>
						}
					</table>
				}
				<br />
			</p>
		</div>

	}
}
else
{
	<p><em>Loading...</em></p>
}
@code
{
	protected override async Task OnInitializedAsync()
	{
		dictionary = new Dictionary<string, Queue<Consensus>>();
		quarter = new string[6];
		var index = 0;

		foreach (var con in await http.GetFromJsonAsync<Consensus[]>(Crypto.Security.GetRoute("Consensus")))
		{
			if (dictionary.TryGetValue(con.Code, out Queue<Consensus> queue))
			{
				queue.Enqueue(con);
				dictionary[con.Code] = queue;
			}
			else
				dictionary[con.Code] = new Queue<Consensus>(new Consensus[] { con });
		}
		foreach (var near in Base.FindTheNearestQuarter(DateTime.Now))
			quarter[index++] = ConvertFormat(near);
	}
	string ConvertFormat(string param) => string.Format("’{0}. {1}.", param.Substring(0, 2), param.Substring(2, 2));
	(string, ConsoleColor) ConvertFormat(double param)
		=> (param < 0 ? param.ToString("P2")[1..] : param.ToString("P2"), param > 0 ? ConsoleColor.Red : ConsoleColor.Blue);
	string[] quarter;
	Dictionary<string, Queue<Consensus>> dictionary;
}