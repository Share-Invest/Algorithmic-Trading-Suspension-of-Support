@page "/portfolio"
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient http
@inject NavigationManager Manager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@if (enumerable.Count > 0)
{
	<Virtualize Items="enumerable" Context="kv" OverscanCount="9">
		<div class="" id="@kv.Key">
			<p>
				@if (kv.Value.Consensus is not null)
				{
					<fieldset class="flex-container" id="@(index = kv.Key)">
						<legend class="legend">
							@{
								var consensus = kv.Value.Consensus.First();

								<span name="@consensus.Date">
									<strong><b>@consensus.Date</b></strong>
								</span>
								<span name="@consensus.Code">
									<small><i>@consensus.Code</i></small>
								</span>
							}
						</legend>

						@if (kv.Value.Balance is Catalog.Models.Balance bal && string.IsNullOrEmpty(bal.Code) is false)
						{
							<div class="sub" @onclick="(e => OnClick(kv.Key, 'B', e))">
								<strong><i>Balance</i></strong>
							</div>

							@if (kv.Value.RenderingBalance)
							{
								<table class="table">
									<thead>
										<tr>
											<th scope="col"><div>수량</div></th>
											<th scope="col"><div>매입가</div></th>
											<th scope="col"><div>현재가</div></th>
											<th scope="col"><div>평가손익</div></th>
											<th scope="col"><div>손익률</div></th>
											<th scope="col"><div>추세선</div></th>
											<th scope="col"><div>이격도</div></th>
										</tr>
									</thead>

									<tbody>
										<tr>
											@{
												bool empty = bal.Quantity.Length == 1 && bal.Quantity[0] is '0', loss = bal.Revenue[0] is '-' && bal.Rate[0] is '-',
													trend = string.IsNullOrEmpty(bal.Trend) is false && bal.Trend[0] is '-',
													separation = string.IsNullOrEmpty(bal.Separation) is false && bal.Separation[0] is '-';
												ConsoleColor color = loss ? ConsoleColor.Blue : ConsoleColor.Red,
													tc = trend ? ConsoleColor.Blue : ConsoleColor.Red, sc = separation ? ConsoleColor.Blue : ConsoleColor.Red;
												string revenue = loss ? bal.Revenue[1..] : bal.Revenue, rate = loss ? bal.Rate[1..] : bal.Rate;

												<td>@(empty ? string.Empty : bal.Quantity)</td>
												<td>@(empty ? string.Empty : bal.Purchase)</td>
												<td>@bal.Current</td>
												<td style="color: @color">@(empty ? string.Empty : revenue)</td>
												<td style="color: @color">@(empty ? string.Empty : rate)</td>
												<td style="color: @tc">@(trend ? bal.Trend[1..] : bal.Trend)</td>
												<td style="color: @sc">@(separation ? bal.Separation[1..] : bal.Separation)</td>
											}
										</tr>
									</tbody>
								</table>
							}
							else
							{
								<br />
							}
						}
						<div class="sub" @onclick="(e => OnClick(kv.Key, 'C', e))">
							<strong><i>Consensus</i></strong>
						</div>

						@if (kv.Value.RenderingConsensus)
						{
							<table class="table">
								<thead>
									<tr class="">
										<th scope="col" title="매출, 영업이익, 순이익, 현금흐름 ( ● : 사용)" style="color: gainsboro">
											<div>
												<small><i>Original</i></small>
											</div>
										</th>
										<th scope="col"><div>@quarter[0]</div></th>
										<th scope="col"><div>@quarter[1]</div></th>
										<th scope="col"><div>@quarter[2]</div></th>
										<th scope="col"><div>@quarter[3]</div></th>
										<th scope="col"><div>@quarter[4]</div></th>
										<th scope="col"><div>@quarter[5]</div></th>
									</tr>
								</thead>

								@foreach (var param in kv.Value.Consensus)
								{
									<tbody>
										<tr>
											<th scope="row">
												<div>@param.Strategics.Replace("T", "●").Replace("F", "·")</div>
											</th>
											@{
												var convert = ConvertFormat(param.FirstQuarter);
												<td style="color: @convert.Item2">@convert.Item1</td>
												convert = ConvertFormat(param.SecondQuarter);
												<td style="color: @convert.Item2">@convert.Item1</td>
												convert = ConvertFormat(param.ThirdQuarter);
												<td style="color: @convert.Item2">@convert.Item1</td>
												convert = ConvertFormat(param.Quarter);
												<td style="color: @convert.Item2">@convert.Item1</td>
												convert = ConvertFormat(param.TheNextYear);
												<td style="color: @convert.Item2">@convert.Item1</td>
												convert = ConvertFormat(param.TheYearAfterNext);
												<td style="color: @convert.Item2">@convert.Item1</td>
											}
										</tr>
									</tbody>
								}
							</table>
						}
						else
						{
							<br />
						}
						@if (kv.Value.RenderingStrategics)
						{
							<fieldset class="flex-container">
								<legend class="legend">
									<span class="sub" @onclick="(e => OnClick(kv.Key, 'S', e))">
										<small><b><i>Strategics</i></b></small>
									</span>
								</legend>

								<ul>
									@{
										switch (kv.Value.Strategics)
										{
											case Catalog.AccordingToTrends:
												kv.Value.SelectStrategics = 'A';
												break;
										}
										<li>
											<div class="strategics">
												<input type="radio" class="strategics_radio" @onclick="(e => OnClick(kv.Key, 'A', e))" />
												<b><i>According to Trends</i></b>
											</div>

											@if (kv.Value.SelectStrategics is 'A')
											{
												<table class="table">
													<thead>
														<tr>
															<th scope="col" style="text-align: center; color: wheat"><div><small><i>EMA</i></small></div></th>
															<th scope="col" class="strategics_table"><div>Short</div></th>
															<th scope="col" class="strategics_table"><div>Long</div></th>
															<th scope="col" class="strategics_table"><div style="color: navy">매도</div></th>
															<th scope="col" class="strategics_table"><div style="color: maroon">매수</div></th>
														</tr>
													</thead>

													<tbody>
														<tr>
															<th scope="row" class="strategics_table">
																<div>Day</div>
															</th>
															<td>
																<input class="strategics_input" type="number" min=2 max=1451 placeholder=5 required />
															</td>
															<td>
																<input class="strategics_input" type="number" min=2 max=1451 placeholder=60 required />
															</td>
															<td>
																<input class="strategics_input" type="number" min=2 max=1451 placeholder=20 required />
															</td>
															<td>
																<input class="strategics_input" type="number" min=2 max=1451 placeholder=45 required />
															</td>
														</tr>
													</tbody>

													<thead>
														<tr>
															<th scope="col"></th>
															<th class="strategics_table" colspan="2" scope="col"><div>수익실현／추가매수（％）</div></th>
															<th class="strategics_table" scope="col"><div>수량（주）</div></th>
															<th class="strategics_table" scope="col"><div>호가단위（틱）</div></th>
														</tr>
													</thead>

													<tbody>
														<tr>
															<th rowspan="2" scope="row" class="strategics_table">
																<div>Appoint</div>
															</th>
															<td class="strategics_table">
																<div style="color: navy"><b>매도</b></div>
															</td>
															<td>
																<input class="strategics_input" type="number" step="0.05" min=0 max=1000 placeholder=1.35 required />
															</td>
															<td>
																<input class="strategics_input" type="number" min=0 placeholder=1 required />
															</td>
															<td>
																<input class="strategics_input" type="number" min=1 placeholder=1 required />
															</td>
														</tr>
														<tr>
															<td class="strategics_table">
																<div style="color: maroon"><b>매수</b></div>
															</td>
															<td>
																<input class="strategics_input" type="number" step="0.05" min=0 max=1000 placeholder=1.75 required />
															</td>
															<td>
																<input class="strategics_input" type="number" min=0 placeholder=1 required />
															</td>
															<td>
																<input class="strategics_input" type="number" min=1 placeholder=1 required />
															</td>
														</tr>
													</tbody>

													<thead>
														<tr>
															<th scope="col"></th>
															<th class="strategics_table" colspan="2" scope="col"><div>（￦）</div></th>
															<th class="strategics_table" scope="col"><div>수량（주）</div></th>
															<th class="strategics_table" scope="col"><div>매매간격（ms）</div></th>
														</tr>
													</thead>

													<tbody>
														<tr>
															<th rowspan="2" scope="row" class="strategics_table">
																<div>Trading</div>
															</th>
															<td class="strategics_table">
																<div style="color: navy"><b>매도</b></div>
															</td>
															<td>
																<input class="strategics_input" type="number" min=2 max=1451 placeholder=1 required />
															</td>
															<td>
																<input class="strategics_input" type="number" min=0 placeholder=1 required />
															</td>
															<td>
																<input class="strategics_input" type="number" min=1 placeholder=1735 required />
															</td>
														</tr>
														<tr>
															<td class="strategics_table">
																<div style="color: maroon"><b>매수</b></div>
															</td>
															<td>
																<input class="strategics_input" type="number" min=2 max=1451 placeholder=1 required />
															</td>
															<td>
																<input class="strategics_input" type="number" min=0 placeholder=1 required />
															</td>
															<td>
																<input class="strategics_input" type="number" min=1 placeholder=1235 required />
															</td>
														</tr>
													</tbody>
												</table>
											}
										</li>
									}
								</ul>
							</fieldset>
						}
						else
						{
							<div class="sub" @onclick="(e => OnClick(kv.Key, 'S', e))">
								<strong><i>Strategics</i></strong>
							</div>
						}
					</fieldset>
				}
				<br />
			</p>
		</div>
	</Virtualize>

	<div class="search">
		<input class="search_input" type="text" @onchange="OnReceiveKeyPress" placeholder="종목을 검색합니다." autocomplete="on">
	</div>
}
else
{
	<p>
		<em>Loading...</em>
	</p>
}
@code
{
	public async ValueTask DisposeAsync() => await hub.DisposeAsync();
	protected override async Task OnInitializedAsync()
	{
		key = new Dictionary<string, int>();
		enumerable = new Dictionary<int, Catalog.Models.Portfolio>();
		dictionary = new Dictionary<string, Queue<Consensus>>();
		quarter = new string[6];
		var index = 0;

		foreach (var con in await http.GetFromJsonAsync<Consensus[]>(Crypto.Security.GetRoute("Consensus")))
		{
			if (dictionary.TryGetValue(con.Code, out Queue<Consensus> queue))
			{
				queue.Enqueue(con);
				dictionary[con.Code] = queue;
			}
			else
				dictionary[con.Code] = new Queue<Consensus>(new Consensus[] { con });
		}
		foreach (var consensus in dictionary.OrderBy(o => o.Key))
		{
			key[consensus.Key] = index;
			key[consensus.Value.Peek().Date] = index;
			enumerable[index++] = new Catalog.Models.Portfolio
			{
				Consensus = consensus.Value,
				RenderingBalance = true
			};
		}
		index = 0;

		foreach (var near in Base.FindTheNearestQuarter(DateTime.Now))
			quarter[index++] = ConvertFormat(near);
	}
	protected override async Task OnAfterRenderAsync(bool render)
	{
		if (render)
		{
			hub = new HubConnectionBuilder().WithUrl(Manager.ToAbsoluteUri("/hub/balance")).Build();
			hub.On<Catalog.Models.Balance>("ReceiveBalanceMessage", (balance) =>
			{
				if (enumerable.TryGetValue(key[balance.Code], out Catalog.Models.Portfolio port))
				{
					port.Balance = balance;
					StateHasChanged();
				}
			});
			await hub.StartAsync();
		}
	}
	void OnClick(int sender, char initial, MouseEventArgs e)
	{
		if (enumerable.TryGetValue(sender, out Catalog.Models.Portfolio portfolio))
			switch (initial)
			{
				case 'A':
					portfolio.SelectStrategics = initial;
					break;

				case 'B':
					portfolio.RenderingBalance = portfolio.RenderingBalance is false;
					break;

				case 'C':
					portfolio.RenderingConsensus = portfolio.RenderingConsensus is false;
					break;

				case 'S':
					if (portfolio.RenderingStrategics)
						portfolio.SelectStrategics = char.MinValue;

					portfolio.RenderingStrategics = portfolio.RenderingStrategics is false;
					break;
			}
	}
	async void OnReceiveKeyPress(ChangeEventArgs e)
	{
		if (e.Value is string str && string.IsNullOrEmpty(str) is false)
			foreach (var name in new[] { str, str.ToUpper() })
				if (this.key.TryGetValue(name, out int index))
				{
					await WaitForTheScrollToMovement(index, 0x95);

					break;
				}
	}
	async Task WaitForTheScrollToMovement(int index, int pixel)
	{
		await JSRuntime.InvokeVoidAsync(string.Concat(interop, "move"), (index - this.index) * pixel);
		await System.Threading.Tasks.Task.Delay(0x700);

		if (this.index >= index && index > this.index - 0x14 || this.index < 0x18 && index < 0x18)
			await JSRuntime.InvokeVoidAsync(string.Concat(interop, "selector"), index);

		else
			await WaitForTheScrollToMovement(index, pixel);
	}
	string ConvertFormat(string param) => string.Format("’{0}. {1}.", param.Substring(0, 2), param.Substring(2, 2));
	(string, ConsoleColor) ConvertFormat(double param)
		=> (param < 0 ? param.ToString("P2")[1..] : param.ToString("P2"), param > 0 ? ConsoleColor.Red : ConsoleColor.Blue);
	string[] quarter;
	int index;
	Dictionary<int, Catalog.Models.Portfolio> enumerable;
	Dictionary<string, Queue<Consensus>> dictionary;
	Dictionary<string, int> key;
	HubConnection hub;
	const string interop = "JsFunctions.";
}