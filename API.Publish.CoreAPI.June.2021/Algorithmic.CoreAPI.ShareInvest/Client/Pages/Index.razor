@page "/account"
@inherits IndexBase

@if (Information is UserInformation[])
{
	<div class="form-group">
		@if (Information.Length > 0)
		{
			<br />

			@for (int i = 0; i < Information.Length; i++)
			{
				<table class="table">
					@if (string.IsNullOrEmpty(Information[i].Name) is false)
					{
						<thead>
							<tr class="separate">
								<th>보유종목</th>
								<th>유가잔고</th>
								<th>예탁자산</th>
								<th>추정예탁자산</th>
							</tr>
							<tr class="separate">
								<td>@(Accounts is not null && Accounts[i] is not null && int.TryParse(Accounts[i]["출력건수"], out int hold) && hold > 0 ? hold.ToString("N0") : string.Empty)</td>
								<td>@(Accounts is not null && Accounts[i] is not null && long.TryParse(Accounts[i]["유가잔고평가액"], out long balance) && balance != 0 ? balance.ToString("C0") : string.Empty)</td>
								<td>@(Accounts is not null && Accounts[i] is not null && long.TryParse(Accounts[i]["예탁자산평가액"], out long assets) && assets != 0 ? assets.ToString("C0") : string.Empty)</td>
								<td>@(Accounts is not null && Accounts[i] is not null && long.TryParse(Accounts[i]["추정예탁자산"], out long estimation) && estimation != 0 ? estimation.ToString("C0") : string.Empty)</td>
							</tr>
							<tr class="separate">
								<th>예수금</th>
								<th>D+2추정예수금</th>
								<th>총매입</th>
								<th>매도담보대출</th>
							</tr>
							<tr class="separate">
								<td>@(Accounts is not null && Accounts[i] is not null && long.TryParse(Accounts[i]["예수금"], out long deposit) && deposit != 0 ? deposit.ToString("C0") : string.Empty)</td>
								<td>@(Accounts is not null && Accounts[i] is not null && long.TryParse(Accounts[i]["D+2추정예수금"], out long d2) && d2 != 0 ? d2.ToString("C0") : string.Empty)</td>
								<td>@(Accounts is not null && Accounts[i] is not null && long.TryParse(Accounts[i]["총매입금액"], out long purchase) && purchase != 0 ? purchase.ToString("C0") : string.Empty)</td>
								<td>@(Accounts is not null && Accounts[i] is not null && long.TryParse(Accounts[i]["매도담보대출금"], out long collateral) && collateral != 0 ? collateral.ToString("C0") : string.Empty)</td>
							</tr>
							<tr class="separate">
								<th class="account" title="@(Accounts is null ? string.Empty : $"{Accounts[i]["계좌명"]}\n{Accounts[i]["지점명"]}")">@(Accounts is not null && Accounts[i] is not null && "31".Equals(Accounts[i]["account"][^2..]) ? "선물옵션" : "위탁종합")</th>
								<th>투자원금</th>
								<th>수익금</th>
								<th>수익률</th>
							</tr>
						</thead>
					}
					<tbody>
						@if (string.IsNullOrEmpty(Information[i].Name) is false)
						{
							<tr class="separate">
								<th>당일</th>
								<td>@(Accounts is not null && Accounts[i] is not null && long.TryParse(Accounts[i]["당일투자원금"], out long principal) && principal != 0 ? principal.ToString("C0") : string.Empty)</td>
								<td>@(Accounts is not null && Accounts[i] is not null && long.TryParse(Accounts[i]["당일투자손익"], out long profit) && profit != 0 ? profit.ToString("C0") : string.Empty)</td>
								<td>@(Accounts is not null && Accounts[i] is not null && double.TryParse(Accounts[i]["당일손익율"], out double rate) && rate != 0 ? rate.ToString("P2") : string.Empty)</td>
							</tr>
							<tr class="separate">
								<th>당월</th>
								<td>@(Accounts is not null && Accounts[i] is not null && long.TryParse(Accounts[i]["당월투자원금"], out long month_principal) && month_principal != 0 ? month_principal.ToString("C0") : string.Empty)</td>
								<td>@(Accounts is not null && Accounts[i] is not null && long.TryParse(Accounts[i]["당월투자손익"], out long month_profit) && month_profit != 0 ? month_profit.ToString("C0") : string.Empty)</td>
								<td>@(Accounts is not null && Accounts[i] is not null && double.TryParse(Accounts[i]["당월손익율"], out double month_rate) && month_rate != 0 ? month_rate.ToString("P2") : string.Empty)</td>
							</tr>
							<tr class="separate">
								<th>누적</th>
								<td>@(Accounts is not null && Accounts[i] is not null && long.TryParse(Accounts[i]["누적투자원금"], out long cumulative_principal) && cumulative_principal != 0 ? cumulative_principal.ToString("C0") : string.Empty)</td>
								<td>@(Accounts is not null && Accounts[i] is not null && long.TryParse(Accounts[i]["누적투자손익"], out long cumulative_profit) && cumulative_profit != 0 ? cumulative_profit.ToString("C0") : string.Empty)</td>
								<td>@(Accounts is not null && Accounts[i] is not null && double.TryParse(Accounts[i]["누적손익율"], out double cumulative_rate) && cumulative_rate != 0 ? cumulative_rate.ToString("P2") : string.Empty)</td>
							</tr>
						}
						<tr>
							<td colspan="4">
								<fieldset class="flex-container">
									<legend class="legend">
										<strong>@(string.IsNullOrEmpty(Information[i].Name) ? "It is not possible to check the current Connection." : Information[i].Name)</strong>
									</legend>

									@if (Information[i].Account.Any(acc => acc.Length == 0xA && acc[^2..].CompareTo("31") < 0))
									{
										<div class="sub">
											Choose the Stock Account
											<ul>
												@foreach (var str in Information[i].Account)
												{
													if (str.Length == 0xA && str[^2..].CompareTo("31") < 0)
													{
														<li>
															<label for="stocks">
																@{
																	var check = str.Equals(Information[i].Check.Split(';')[0]);
																	<input type="radio" id="stocks" name="@i" value="@string.Concat(str, ';', i)" @onchange="e => OnReceiveTheSelectedButton(e)" checked="@check">
																	@Base.ConvertFormat(str)

																	if (check && (Connection.ContainsKey(str) is false || Connection[str]))
																	{
																		<span class="oi_search oi oi-loop-circular" aria-hidden="true" @onclick="e => OnClick(str, e)" />
																	}
																}
															</label>
														</li>
													}
												}
											</ul>
										</div>
									}
									@if (Information[i].Account.Any(acc => acc.Length == 0xA && acc[^2..].CompareTo("31") == 0))
									{
										<div class="sub">
											Choose the Futures Account
											<ul>
												@foreach (var str in Information[i].Account)
												{
													if (str.Length == 0xA && str[^2..].CompareTo("31") == 0)
													{
														<li>
															<label for="futures">
																@{
																	var check = str.Equals(Information[i].Check.Split(';')[^1]);

																	<input type="radio" id="futures" name="@string.Concat("31", i)" value="@string.Concat(str, ';', i)" @onchange="e => OnReceiveTheSelectedButton(e)" checked="@check">
																	@Base.ConvertFormat(str)

																	if (check && (Connection.ContainsKey(str) is false || Connection[str]))
																	{
																		<span class="oi_search oi oi-loop-circular" aria-hidden="true" @onclick="e => OnClick(str, e)" />
																	}
																}
															</label>
														</li>
													}
												}
											</ul>
										</div>
									}
								</fieldset>
							</td>
						</tr>
					</tbody>
				</table>
			}
		}
	</div>
	<div class="form-group">
		@if (string.IsNullOrEmpty(Caution) is false)
		{
			<div class="caution">@Caution</div>
			<br />
		}
		<span class="user_span">
			Enter the ID to connect with OpenAPI
			<input class="user_input" maxlength="8" placeholder="키움증권 ID" required @bind="Kiwoom" autocomplete="on" />
		</span>
		<br />
		<span class="user_span">
			Enter your Name linked to the Account
			<input class="user_input" maxlength="8" placeholder="계좌명" required @bind="Name" autocomplete="on" />
		</span>
		<div class="button_style">
			<button class="button_style_append" @onclick="e => Send(Kiwoom, Name, e)" disabled="@IsClicked">Append</button>
			<button class="button_style_save" @onclick="Send" disabled="@(IsClicked is false)">Save</button>
		</div>
		<br />
	</div>
}
else
{
	<p><em>The Account don’t Exist...</em></p>
	<p><em>Connect the OpenAPI</em></p>
	<p><em>Load the Account Information.</em></p>
}