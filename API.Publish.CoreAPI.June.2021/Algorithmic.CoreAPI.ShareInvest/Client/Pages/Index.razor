@page "/account"
@inherits IndexBase

@if (Information is UserInformation[])
{
	<div class="form-group">
		@if (Information.Length > 0)
		{
			<br />

			@for (int i = 0; i < Information.Length; i++)
			{
				<table class="table">
					@if (string.IsNullOrEmpty(Information[i].Name) is false)
					{
						<thead>
							<tr class="separate">
								<th colspan="3">보유종목</th>
								<th colspan="3">유가잔고</th>
								<th colspan="3">예탁자산</th>
								<th colspan="3">추정예탁자산</th>
							</tr>
							<tr class="separate">
								@foreach (var hold in Holds)
								{
									switch (OnClick(i, hold))
									{
										case string response:
											<td colspan="3">@response</td>
											break;

										case Tuple<ConsoleColor, string> tuple:
											<td colspan="3" style="color: @tuple.Item1">@tuple.Item2</td>
											break;
									}
								}
							</tr>
							<tr class="separate">
								<th colspan="3">예수금</th>
								<th colspan="3">D+2추정예수금</th>
								<th colspan="3">총매입</th>
								<th colspan="3">매도담보대출</th>
							</tr>
							<tr class="separate">
								@foreach (var depo in Deposit)
								{
									switch (OnClick(i, depo))
									{
										case string response:
											<td colspan="3">@response</td>
											break;

										case Tuple<ConsoleColor, string> tuple:
											<td colspan="3" style="color: @tuple.Item1">@tuple.Item2</td>
											break;
									}
								}
							</tr>
							@if (OnClick(i, string.Empty) is false)
							{
								<tr class="separate">
									<th colspan="3" class="account" title="@(Accounts is null ? string.Empty : $"{Accounts[i]["계좌명"]}\n{Accounts[i]["지점명"]}")">@(Accounts is not null && Accounts[i] is not null && "31".Equals(Accounts[i]["account"][^2..]) ? "선물옵션" : "위탁종합")</th>
									<th colspan="3">투자원금</th>
									<th colspan="3">수익금</th>
									<th colspan="3">수익률</th>
								</tr>
							}
						</thead>
					}
					<tbody>
						@if (string.IsNullOrEmpty(Information[i].Name) is false && OnClick(i, string.Empty) is false)
						{
							foreach (var prefix in Prefix)
							{
								<tr class="separate">
									<th colspan="3">@prefix</th>

									@foreach (var suffix in Suffix)
									{
										switch (OnClick(i, string.Concat(prefix, suffix)))
										{
											case string response:
												<td colspan="3">@response</td>
												break;

											case Tuple<ConsoleColor, string> tuple:
												<td colspan="3" style="color: @tuple.Item1">@tuple.Item2</td>
												break;
										}
									}
								</tr>
							}
							if (Balances[i].Length > 0)
							{
								<tr class="separate">
									<th>종목명</th>
									<th>보유량</th>
									<th>결제잔고</th>
									<th>전일</th>
									<th>금일</th>
									<th>매입가</th>
									<th>현재가</th>
									<th>평가손익</th>
									<th>수익률</th>
									<th>매입금액</th>
									<th>평가금액</th>
									<th>대출일</th>
								</tr>

								@foreach (var balance in Balances[i])
								{
									<tr class="separate">
										<td>@balance.Name</td>
										<td>@balance.Quantity.ToString("N0")</td>
										<td>@balance.Balance.ToString("N0")</td>

										@{
											var pre = balance.PreviousPurchaseQuantity - balance.PreviousSalesQuantity;
											var today = balance.PurchaseQuantity - balance.SalesQuantity;

											if (pre < 0)
											{
												<td style="color: #00F">@Math.Abs(pre).ToString("N0")</td>
											}
											else
											{
												<td>@pre.ToString("N0")</td>
											}
											if (today < 0)
											{
												<td style="color: #00F">@Math.Abs(today).ToString("N0")</td>
											}
											else
											{
												<td>@today.ToString("N0")</td>
											}
										}
										<td>@balance.Average.ToString("N0")</td>
										<td>@balance.Current.ToString("N0")</td>
										<td style="@(balance.Amount > 0 ? "#F00" : "#00F")">@Math.Abs(balance.Amount).ToString("N0")</td>
										<td style="@(balance.Rate > 0 ? "#F00" : "#00F")">@Math.Abs(balance.Rate).ToString("P2")</td>
										<td>@balance.Purchase.ToString("C0")</td>
										<td>@balance.Evaluation.ToString("C0")</td>
										<td>@balance.Loan</td>
									</tr>
								}
							}
						}
						<tr>
							<td colspan="12">
								<fieldset class="flex-container">
									<legend class="legend">
										<strong>@(string.IsNullOrEmpty(Information[i].Name) ? "It is not possible to check the current Connection." : Information[i].Name)</strong>
									</legend>

									@if (Information[i].Account.Any(acc => acc.Length == 0xA && acc[^2..].CompareTo("31") < 0))
									{
										<div class="sub">
											Choose the Stock Account
											<ul>
												@foreach (var str in Information[i].Account)
												{
													if (str.Length == 0xA && str[^2..].CompareTo("31") < 0)
													{
														<li>
															<label for="stocks">
																@{
																	var check = str.Equals(Information[i].Check.Split(';')[0]);
																	<input type="radio" id="stocks" name="@i" value="@string.Concat(str, ';', i)" @onchange="e => OnReceiveTheSelectedButton(e)" checked="@check">
																	@Base.ConvertFormat(str)

																	if (check && (Connection.ContainsKey(str) is false || Connection[str]))
																	{
																		<span class="oi_search oi oi-loop-circular" aria-hidden="true" @onclick="e => OnClick(str, e)" />
																	}
																}
															</label>
														</li>
													}
												}
											</ul>
										</div>
									}
									@if (Information[i].Account.Any(acc => acc.Length == 0xA && acc[^2..].CompareTo("31") == 0))
									{
										<div class="sub">
											Choose the Futures Account
											<ul>
												@foreach (var str in Information[i].Account)
												{
													if (str.Length == 0xA && str[^2..].CompareTo("31") == 0)
													{
														<li>
															<label for="futures">
																@{
																	var check = str.Equals(Information[i].Check.Split(';')[^1]);

																	<input type="radio" id="futures" name="@string.Concat("31", i)" value="@string.Concat(str, ';', i)" @onchange="e => OnReceiveTheSelectedButton(e)" checked="@check">
																	@Base.ConvertFormat(str)

																	if (check && (Connection.ContainsKey(str) is false || Connection[str]))
																	{
																		<span class="oi_search oi oi-loop-circular" aria-hidden="true" @onclick="e => OnClick(str, e)" />
																	}
																}
															</label>
														</li>
													}
												}
											</ul>
										</div>
									}
								</fieldset>
							</td>
						</tr>
					</tbody>
				</table>
			}
		}
	</div>
	<div class="form-group">
		@if (string.IsNullOrEmpty(Caution) is false)
		{
			<div class="caution">@Caution</div>
			<br />
		}
		<span class="user_span">
			Enter the ID to connect with OpenAPI
			<input class="user_input" maxlength="8" placeholder="키움증권 ID" required @bind="Kiwoom" autocomplete="on" />
		</span>
		<br />
		<span class="user_span">
			Enter your Name linked to the Account
			<input class="user_input" maxlength="8" placeholder="계좌명" required @bind="Name" autocomplete="on" />
		</span>
		<div class="button_style">
			<button class="button_style_append" @onclick="e => Send(Kiwoom, Name, e)" disabled="@IsClicked">Append</button>
			<button class="button_style_save" @onclick="Send" disabled="@(IsClicked is false)">Save</button>
		</div>
		<br />
	</div>
}
else
{
	<p><em>The Account don’t Exist...</em></p>
	<p><em>Connect the OpenAPI</em></p>
	<p><em>Load the Account Information.</em></p>
}