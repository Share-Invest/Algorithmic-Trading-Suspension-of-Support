@page "/account"
@inherits IndexBase

@if (Information is UserInformation[])
{
	<div class="form-group">
		@if (string.IsNullOrEmpty(Caution) is false)
		{
			<div class="caution">@Caution</div>
			<br />
		}
		<span class="user_span">
			Enter the ID to connect with OpenAPI
			<input class="user_input" maxlength="8" placeholder="키움증권 ID" required @bind="Kiwoom" autocomplete="on" />
		</span>
		<br />
		<span class="user_span">
			Enter your Name linked to the Account
			<input class="user_input" maxlength="8" placeholder="계좌명" required @bind="Name" autocomplete="on" />
		</span>
	</div>
	<div class="button_style">
		<button class="button_style_append" @onclick="e => Send(Kiwoom, Name, e)" disabled="@IsClicked">Append</button>
		<button class="button_style_save" @onclick="Send" disabled="@(IsClicked is false)">Save</button>
	</div>
	<div class="form-group">
		@if (Information.Length > 0)
		{
			<hr />

			for (int i = 0; i < Information.Length; i++)
			{
				<p>
					<fieldset class="flex-container">
						<legend class="legend">
							<strong>@(string.IsNullOrEmpty(Information[i].Name) ? "It is not possible to check the current Connection." : Information[i].Name)</strong>
						</legend>
						@if (Information[i].Account.Any(acc => acc.Length == 0xA && acc[^2..].CompareTo("31") < 0))
						{
							<div class="sub">
								Choose the Stock Account
								<ul>
									@foreach (var str in Information[i].Account)
									{
										if (str.Length == 0xA && str[^2..].CompareTo("31") < 0)
										{
											<li>
												<label for="stocks">
													@{
														var check = str.Equals(Information[i].Check.Split(';')[0]);
														<input type="radio" id="stocks" name="@i" value="@string.Concat(str, ';', i)" @onchange="e => OnReceiveTheSelectedButton(e)" checked="@check">
														@Base.ConvertFormat(str)

														if (check && (Connection.ContainsKey(str) is false || Connection[str]))
														{
															<span class="oi_search oi oi-loop-circular" aria-hidden="true" @onclick="e => OnClick(str, e)" />
														}
													}
												</label>
											</li>
										}
									}
								</ul>
							</div>
						}
						@if (Information[i].Account.Any(acc => acc.Length == 0xA && acc[^2..].CompareTo("31") == 0))
						{
							<div class="sub">
								Choose the Futures Account
								<ul>
									@foreach (var str in Information[i].Account)
									{
										if (str.Length == 0xA && str[^2..].CompareTo("31") == 0)
										{
											<li>
												<label for="futures">
													@{
														var check = str.Equals(Information[i].Check.Split(';')[^1]);
														<input type="radio" id="futures" name="@string.Concat("31", i)" value="@string.Concat(str, ';', i)" @onchange="e => OnReceiveTheSelectedButton(e)" checked="@check">
														@Base.ConvertFormat(str)

														if (check && (Connection.ContainsKey(str) is false || Connection[str]))
														{
															<span class="oi_search oi oi-loop-circular" aria-hidden="true" @onclick="e => OnClick(str, e)" />
														}
													}
												</label>
											</li>
										}
									}
								</ul>
							</div>
						}
					</fieldset>
				</p>
				@if (i < Information.Length - 1)
				{
					<hr />
				}
			}
		}
	</div>
}
else
{
	<p><em>The Account don’t Exist...</em></p>
	<p><em>Connect the OpenAPI</em></p>
	<p><em>Load the Account Information.</em></p>
}