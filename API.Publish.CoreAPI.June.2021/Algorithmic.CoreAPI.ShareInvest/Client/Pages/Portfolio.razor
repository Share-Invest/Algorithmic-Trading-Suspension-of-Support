@page "/portfolio"
@inherits PortfolioBase

@if (Codes is Catalog.Models.Codes[] && string.IsNullOrEmpty(Complete) is false)
{
	foreach (var user in Information)
	{
		if (string.IsNullOrEmpty(user.Check) is false)
		{
			var account = user.Check.Split(';')[0];

			<fieldset class="flex-container">
				<legend class="legend">
					<span class="sub">@Base.ConvertFormat(account)</span>
					<input type="text" class="codes" name="codes" list="codes-list" placeholder="Please enter the code." @onchange="e => OnReceiveTheChoiceItem(e, account)" required />
					<input type="text" class="strategics" name="strategics" list="strategics-list" placeholder="Please enter the strategics." @onchange="e => OnReceiveTheChoiceItem(account, e)" required />
				</legend>

				@if (ChosenStrategics.TryGetValue(account, out string value) && Enum.TryParse(value, out Strategics name) && ChosenCodes.TryGetValue(account, out string code) && Codes.Any(o => o.Code.Equals(code)))
				{
					switch (name)
					{
						case Strategics.Long_Position:
							var record = RetrieveRecordedInformation(name, account, code);

							<table class="table">
								<thead>
									<tr name="@((int)name)">
										<th scope="col" title="매도ㆍ매수 ( ￦ : Unit )">
											<div class="context">@Enum.GetName(typeof(Strategics), name).Replace("_", " ")</div>
										</th>
										<th scope="col"><div class="title">Underweight</div></th>
										<th scope="col"><div class="title">Overweight</div></th>
									</tr>
								</thead>
								<tbody>
									<tr>
										<th scope="row" title="@(string.IsNullOrEmpty(record.Item3) ? "Data doesn′t Exist." : record.Item3)">
											<div class="sub_context">@Codes.First(o => o.Code.Equals(code)).Name</div>
										</th>
										<td>
											<span><input class="strategics_input" type="text" placeholder="@record.Item1" required onchange="number(this)" onkeyup="number(this)" id="@string.Concat((int)name, account)" /><small> won</small></span>
										</td>
										<td>
											<span><input class="strategics_input" type="text" placeholder="@record.Item2" required onchange="number(this)" onkeyup="number(this)" id="@string.Concat(account, (int)name)" /><small> won</small></span>
										</td>
									</tr>
								</tbody>
							</table>
							break;
					}
					<div class="button_style">
						<button class="button_style_verify" @onclick="e => RequestVerification(account, e)" disabled="@(IsClicked.ContainsKey(account) is false)">Verify</button>
						<button class="button_style_save" @onclick="e => RequestSave((int)name, account, e)" disabled="@IsClicked.ContainsKey(account)">@Complete</button>
					</div>
				}
			</fieldset>
		}
		<br />
	}
	<datalist id="strategics-list">
		@foreach (var st in Enum.GetValues(typeof(Strategics)))
		{
			<option value="@((int)st)">@st.ToString().Replace("_", " ")</option>
		}
	</datalist>
	<datalist id="codes-list">
		@foreach (var co in Codes.OrderBy(o => o.Name))
		{
			<option value="@co.Code">@co.Name</option>
		}
	</datalist>
}
else
{
	<p>
		<em>Loading...</em>
	</p>
}